If-else condition
============
#!/bin/bash
echo "enter age: "
read age
if [ $age -le 18 ]
then
        echo "person is child"
else
        echo "person is young"
fi

If-elif-else
============
#!/bin/bash
echo "enter the color: "
read color # Change the color value here to test different scenarios

if [ "$color" = "white" ]; then
    echo "The color is sheep."
elif [ "$color" = "black" ]; then
    echo "The color is goat."
elif [ "$color" = "red" ]; then
    echo "The color is horse."
else
    echo "The color is neither white, black, nor red."
fi

if statement
------------
#!/bin/bash
echo "Enter your Age:"
read age
if [ $age -ge 18 ]
then
echo "your eligible for voting"
else
echo "your not eligible for voting"
echo "Thank You!."
fi

elif
#!/bin/bash
echo "select traffic signals RED GREEN YELLOW"
read colour
if [ $colour == RED ];
then
echo "Red colour indicates STOP"
elif [ $colour == GREEN ];
then
echo "GREEN colour indicates START"
elif [ $colour == YELLOW ];
then
echo "Yellow colour indicates ready to start"
else
echo "Sorry This colour is not avalible in our script!"
echo "Thank you!!.."
fi



for loop
========
for loop is used to iterate a part of a program several times. if the no of iterations are fixed recommended 
to for loop.

vi forloop.sh
-------------
#!/bin/bash

for i in 1 2 3 4 5 6 7 8 9
do
echo $i
done
o/p:1 2 3 4 5 6 7 8 9

vi forloop.sh
--------------
#!/bin/bash                           
for i in $(seq 1 1 10)
do
echo $i
done

o/p:1 2 3 4 5 6 7 8 9 10

vi forloop.sh
--------------
#!/bin/bash                           
for i in $(seq 1 2 10)
do
echo $i
done

o/p:1 3 5 7 9

vi for.sh
-------------

#!/bin/bash
for table in {2..20..2}
do
echo "Table for 2: $table"
done

o/p:2 4 6 8 10 12 14 16 18 20

vi forloop.sh
--------------
#!/bin/bash 
a=(1 2 3 4 5 6)                          
for i in ${a[@]}
do
echo $i
done


while loop
==========
while loop is used to iterate a part of a program several times, if the no of iterations are not fixed it 
recomend while loop.while loop executes until the condition satisfy.

vi while.sh
===========
#!/bin/bash

echo enter the value for n:
read n
while [ $n -gt 0 ]
do
echo $n
n=$(expr $n - 1)
done

vi while.sh
===========
#!/bin/bash

echo enter the value for n:
read n
while [ $n -gt 0 ]
do
echo $n
let n--;
done

vi while.sh
===========
#!/bin/bash

echo enter the value for n:
read n
i=0
while [ $i -lt $n ]
do
echo $i
i=$(expr $i + 1)
done

o/p:0 1 2 3 4 5 6


Break & continue
================
Break:
------
*)it will execute in the loops
*)condition exists from the loop

while [condition]
do
--
--
break 
--
--
done

vi break_for.sh
===============
for i in $(seq 1 1 10)
do
if [ $i -eq 6 ]
then
break
fi
echo $i
done

o/p:1 2 3 4 5 

vi continue_for.sh
===============
for i in $(seq 1 1 10)
do
if [ $i -eq 6 ]
then
continue
fi
echo $i
done

o/p:1 2 3 4 5 7 8 9 10

vi break_while.sh
=================
echo enter the value for n:
read n
i=0
while [ $i -le $n ]
do
if [ $i -eq 4 ]
then
break
fi
echo $i
i=$(expr $i + 1 )
done

o/p:0 1 2 3

vi continue_while.sh
=================
echo enter the value for n:
read n
i=0
while [ $i -le $n ]
do
if [ $i -eq 4 ]
then
continue
fi
echo $i
i=$(expr $i + 1 )
done

o/p:0 1 2 3 5 6 7 8 9